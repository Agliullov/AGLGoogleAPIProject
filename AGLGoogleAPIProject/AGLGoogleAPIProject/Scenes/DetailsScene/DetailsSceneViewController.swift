//
//  DetailsSceneViewController.swift
//  AGLGoogleAPIProject
//
//  Created by Ильдар Аглиуллов on 06.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsSceneDisplayLogic: AnyObject {
    func displayDetailsFetchedImages(viewModel: DetailsScene.Details.ViewModel)
}

final class DetailsSceneViewController: UIViewController {
    
    var interactor: DetailsSceneBusinessLogic?
    var router: (DetailsSceneRoutingLogic & DetailsSceneDataPassing)?
    
    private var webUrl: String?

    private var displayedSection: [DetailsScene.DisplayedSection] = []
    
    private lazy var collectionViewLayout: UICollectionViewFlowLayout = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumLineSpacing = 12.0
        layout.minimumInteritemSpacing = 12.0
        layout.sectionInset = UIEdgeInsets(top: 24.0, left: 12.0, bottom: 24.0, right: 12.0)
        return layout
    }()
    
    private lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)
        collectionView.backgroundColor = UIColor.systemGroupedBackground
        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        collectionView.decelerationRate = .fast
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(DetailsCollectionViewCell.self, forCellWithReuseIdentifier: String(describing: DetailsCollectionViewCell.self))
        return collectionView
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailsSceneInteractor()
        let presenter = DetailsScenePresenter()
        let router = DetailsSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureCollectionView()
        setOpenWebNavButton()
        fetchDetailsImage(false, false)
    }
    
    private func configureCollectionView() {
        self.view.addSubview(collectionView)
        collectionView.frame = view.bounds
    }
    
    // MARK: - Fetch details image
    
    private func fetchDetailsImage(_ isNext: Bool, _ isPrev: Bool) {
        let request = DetailsScene.Details.Request(isNext: isNext, isPrev: isPrev)
        interactor?.fetchImages(request: request)
    }
    
    private func fetchPrevImage() {
        fetchDetailsImage(false, true)
    }
    
    private func fetchNextImage() {
        fetchDetailsImage(true, false)
    }
    
    // MARK: - Open web
    
    private func setOpenWebNavButton() {
        let openButton = UIBarButtonItem(barButtonSystemItem: .compose, target: self, action: #selector(presentWebView))
        navigationItem.rightBarButtonItem = openButton
    }
    
    @objc private func presentWebView() {
        router?.openWebView(urlString: self.webUrl)
    }
}

extension DetailsSceneViewController: DetailsSceneDisplayLogic {
    
    func displayDetailsFetchedImages(viewModel: DetailsScene.Details.ViewModel) {
        displayedSection = viewModel.displayedSection
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
}

extension DetailsSceneViewController: UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return displayedSection.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedSection[section].cells.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let displayedSection = self.displayedSection[safeIndex: indexPath.section]
        let cellType = displayedSection?.cells[safeIndex: indexPath.row]?.type
        
        switch cellType {
        case .description(let imageURL, let webUrl):
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: DetailsCollectionViewCell.self), for: indexPath) as? DetailsCollectionViewCell else { return UICollectionViewCell() }
            self.webUrl = webUrl
            cell.setup(imageURL: imageURL)
            cell.leftSideButtonTapped = { [weak self] in
                self?.fetchPrevImage()
            }
            cell.rightSideButtonTapped = { [weak self] in
                self?.fetchNextImage()
            }
            return cell
        case .none:
            return UICollectionViewCell()
        }
    }
}

extension DetailsSceneViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
    }
}

extension DetailsSceneViewController: UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let heightCell: CGFloat = view.bounds.height - 100
        let sectionInset = (collectionViewLayout as? UICollectionViewFlowLayout)?.sectionInset ?? .zero
        let widthCell = collectionView.safeAreaLayoutGuide.layoutFrame.width - sectionInset.left - sectionInset.right
        
        return CGSize(width: widthCell, height: heightCell)
    }
}
