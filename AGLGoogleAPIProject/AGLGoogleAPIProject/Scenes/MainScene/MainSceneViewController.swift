//
//  MainSceneViewController.swift
//  AGLGoogleAPIProject
//
//  Created by Ильдар Аглиуллов on 06.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainSceneDisplayLogic: AnyObject {
    func displayFetchedImages(viewModel: MainScene.Main.ViewModel)
    func displayDetailsVC(viewModel: MainScene.OpenDetails.ViewModel)
}

final class MainSceneViewController: UIViewController {
    
    var interactor: MainSceneBusinessLogic?
    var router: (MainSceneRoutingLogic & MainSceneDataPassing)?
    
    private var displayedSection: [MainScene.DisplayedSection] = []
    
    private lazy var collectionViewLayout: UICollectionViewFlowLayout = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        return layout
    }()
    
    private lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: collectionViewLayout)
        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        collectionView.backgroundColor = UIColor.systemGroupedBackground
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(MainCollectionViewCell.self, forCellWithReuseIdentifier: String(describing: MainCollectionViewCell.self))
        collectionView.register(MainEmptyCollectionViewCell.self, forCellWithReuseIdentifier: String(describing: MainEmptyCollectionViewCell.self))
        return collectionView
    }()
    
    private var searchController: UISearchController = {
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.placeholder = "Искать в Google"
        searchController.hidesNavigationBarDuringPresentation = true
        searchController.obscuresBackgroundDuringPresentation = false
        return searchController
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MainSceneInteractor()
        let presenter = MainScenePresenter()
        let router = MainSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationItem.largeTitleDisplayMode = .automatic
        self.navigationController?.navigationBar.prefersLargeTitles = true
        self.title = "Google Картинки"
        configureSearchController()
        configureCollectionView()
        fetchImages(with: nil)
    }
    
    private func configureSearchController() {
        searchController.searchResultsUpdater = self
        self.navigationItem.searchController = self.searchController
        self.navigationItem.searchController?.searchBar.sizeToFit()
    }
    
    private func configureCollectionView() {
        self.view.addSubview(collectionView)
        collectionView.frame = view.bounds
    }
    
    // MARK: - Fetch data
    
    private func fetchImages(with inputText: String?) {
        searchController.startLoading()
        let request = MainScene.Main.Request(inputText: inputText ?? "")
        interactor?.fetchImages(request: request)
    }
    
    // MARK: Routing
    
    private func openDetailsViewController(index: Int) {
        let request = MainScene.OpenDetails.Request(index: index)
        interactor?.openDetailsViewController(request: request)
    }
}

extension MainSceneViewController: MainSceneDisplayLogic {
    
    func displayFetchedImages(viewModel: MainScene.Main.ViewModel) {
        DispatchQueue.main.async {
            self.displayedSection = viewModel.displayedSection
            self.collectionView.reloadData()
            self.searchController.stopLoading()
        }
    }
    
    func displayDetailsVC(viewModel: MainScene.OpenDetails.ViewModel) {
        self.router?.routeToDetails()
    }
}

//MARK: - Collection View

extension MainSceneViewController: UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return displayedSection.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedSection[section].cells.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let displayedSectionType = displayedSection[safeIndex: indexPath.section]
        let cellType = displayedSectionType?.cells[safeIndex: indexPath.row]?.type
        
        switch cellType {
        case .main(let titleText, let subtitleText, let imageURL):
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: MainCollectionViewCell.self), for: indexPath) as? MainCollectionViewCell else { return UICollectionViewCell() }
            cell.setup(titleText, subtitleText, imageURL)
            return cell
        case .empty:
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: MainEmptyCollectionViewCell.self), for: indexPath) as? MainEmptyCollectionViewCell else { return UICollectionViewCell() }
            return cell
        case .none:
            return UICollectionViewCell()
        }
    }
}

extension MainSceneViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if let cell = displayedSection[safeIndex: indexPath.section]?.cells.first {
            if cell.type != .empty {
                self.openDetailsViewController(index: indexPath.row)
            }
        }
        collectionView.deselectItem(at: indexPath, animated: true)
    }
}

extension MainSceneViewController: UISearchResultsUpdating {
    
    func updateSearchResults(for searchController: UISearchController) {
        fetchImages(with: searchController.searchBar.text)
    }
}

extension MainSceneViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        guard displayedSection[indexPath.section].cells.first?.type == .empty else {
            return CGSize(width: collectionView.bounds.width * 0.48, height: collectionView.bounds.width * 0.7)
        }
        return CGSize(width: collectionView.frame.height / 2, height: collectionView.frame.height / 2)
    }
}
